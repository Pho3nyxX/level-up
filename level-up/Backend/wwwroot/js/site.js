// Please see documentation at https://learn.microsoft.com/aspnet/core/client-side/bundling-and-minification
// for details on configuring this project to bundle and minify static web assets.

// Write your JavaScript code.
var l = class { constructor(e) { this._videoContainer = document.getElementById(e), this.videoElement = ".video", this.playBtn = ".play-pause-btn", this.fullScreenBtn = ".full-screen-btn", this.volumeBtn = ".volumn-btn", this.settingsBtn = ".settings-btn", this.settingsMenu = ".settings-menu", this.playbackSpeedMenu = "#playbackSpeedMenu", this.qualityMenu = "#qualityMenu", this._playbackSpeed = 1, this.currentTimeElement = ".video-current-time", this.videoDurationElement = ".video-duration", this.progressBar = ".scrub-progress", this.progressHandle = ".scrub-circle", this.videoDurationElement.innerHTML = this.convertSecondsToString(this.videoElement.duration), this.setUpEvents() } get videoContainer() { return this._videoContainer } get videoElement() { return this._videoElement } set videoElement(e) { let t = this.videoContainer.querySelector(e); t && (this._videoElement = t, this._videoElement.removeAttribute("controls")) } get playBtn() { return this._playBtn } set playBtn(e) { let t = this.videoContainer.querySelector(e); t && (this._playBtn = t) } get fullScreenBtn() { return this._fullScreenBtn } set fullScreenBtn(e) { let t = this.videoContainer.querySelector(e); t && (this._fullScreenBtn = t) } get volumeBtn() { return this._volumnBtn } set volumeBtn(e) { let t = this.videoContainer.querySelector(e); t && (this._volumnBtn = t) } get settingsBtn() { return this._settingsBtn } set settingsBtn(e) { let t = this.videoContainer.querySelector(e); t && (this._settingsBtn = t) } get settingsMenu() { return this._settingsMenu } set settingsMenu(e) { let t = this.videoContainer.querySelector(e); t && (this._settingsMenu = t) } get playbackSpeed() { return this._playbackSpeed } set playbackSpeed(e) { this.updatedPlaybackSpeedMenu(e), this._playbackSpeed = e, this.updatePlaybackSpeed() } get playbackSpeedMenu() { return this._playbackSpeedMenu } set playbackSpeedMenu(e) { let t = this.videoContainer.querySelector(e); t && (this._playbackSpeedMenu = t) } get qualityMenu() { return this._qualityMenu } set qualityMenu(e) { let t = this.videoContainer.querySelector(e); t && (this._qualityMenu = t) } get videoDurationElement() { return this._videoDurationElement } set videoDurationElement(e) { let t = this.videoContainer.querySelector(e); t && (this._videoDurationElement = t) } get currentTimeElement() { return this._currentTimeElement } set currentTimeElement(e) { let t = this.videoContainer.querySelector(e); t && (this._currentTimeElement = t) } get progressBar() { return this._progressBar } set progressBar(e) { let t = this.videoContainer.querySelector(e); t && (this._progressBar = t) } get progressHandle() { return this._progressHandle } set progressHandle(e) { let t = this.videoContainer.querySelector(e); t && (this._progressHandle = t) } setUpEvents() { this.playBtn.addEventListener("click", this.playPause), this.fullScreenBtn.addEventListener("click", this.FullExitScreen), this.volumeBtn.addEventListener("click", this.MuteUnmute), this.settingsBtn.addEventListener("click", this.toggleSettingBtn), this.settingsMenu.addEventListener("click", this.toggleMenuItem), this.playbackSpeedMenu.addEventListener("click", this.clickedSpeed), this.videoElement.addEventListener("play", this.videoPlay), this.videoElement.addEventListener("pause", this.videoPause), this.videoElement.addEventListener("click", this.playPause), document.addEventListener("keydown", this.keyboardShortcuts), this.progressHandle.addEventListener("mousedown", this.progressHandleDownMousePress), this.videoElement.addEventListener("seeked", this.seekEventListener) } playPause = e => { this.videoElement.paused ? this.play() : this.pause() }; play() { this.videoElement.play(); let e = this.playBtn.querySelector("i"); e.classList.remove("bi-play-fill"), e.classList.add("bi-pause-fill") } pause() { this.videoElement.pause(); let e = this.playBtn.querySelector("i"); e.classList.remove("bi-pause-fill"), e.classList.add("bi-play-fill") } fullsreen() { this.videoContainer.classList.add("fullscreen"), this.videoContainer.requestFullscreen(); let e = this.fullScreenBtn.querySelector("i"); e.classList.add("bi-fullscreen-exit"), e.classList.remove("bi-arrows-fullscreen") } exitFullscreen() { this.videoContainer.classList.remove("fullscreen"), document.exitFullscreen(); let e = this.fullScreenBtn.querySelector("i"); e.classList.add("bi-arrows-fullscreen"), e.classList.remove("bi-fullscreen-exit") } FullExitScreen = e => { this.toggleFullScreen() }; toggleFullScreen() { document.fullscreenElement ? this.exitFullscreen() : this.fullsreen() } MuteUnmute = e => { this.videoElement.muted ? this.unmute() : this.mute() }; mute() { let e = this.volumeBtn.querySelector("i"); e.classList.remove("bi-volume-up-fill"), e.classList.add("bi-volume-mute-fill"), this.videoElement.muted = !0 } unmute() { let e = this.volumeBtn.querySelector("i"); e.classList.remove("bi-volume-mute-fill"), e.classList.add("bi-volume-up-fill"), this.videoElement.muted = !1 } toggleSettingBtn = e => { this.settingsMenu.classList.toggle("active") }; toggleMenuItem = e => { if (e.target.closest(".menu-item-link")) { let t = e.target.closest(".menu-item"); t && (t.classList.toggle("active"), this.videoContainer.querySelectorAll(".menu-item").forEach(i => { i !== t && i.classList.toggle("hide") })) } }; playbackSpeedClick = e => { let t = e.target.dataset.value; this.playbackSpeed = t }; updatePlaybackSpeed() { this.videoElement.playbackRate = parseFloat(this.playbackSpeed) } updatedPlaybackSpeedMenu(e) { if (this.playbackSpeed !== e) { let t = this.videoContainer.querySelector("a[data-value='" + this.playbackSpeed + "']"); t.innerHTML = this.playbackSpeed; let n = this.videoContainer.querySelector("a[data-value='" + e + "']"); n.innerHTML = "<i class='bi bi-check-lg'></i>" + e } } clickedSpeed = e => { if (e.target.tagName.toLowerCase() == "a") { let t = e.target.dataset.value; this.playbackSpeed = t } }; convertSecondsToString(e) { let t = new Date(parseInt(e * 1e3)), n = t.getUTCHours(), i = t.getUTCMinutes(), r = t.getSeconds(), s = ""; return n > 0 && (s = n.toString().padStart(2, "0") + ":"), s = i.toString().padStart(2, "0") + ":" + r.toString().padStart(2, "0"), s } seekEventListener = e => { this.updateCurrentTime(this) }; updateCurrentTime(e) { e || (e = this), e.currentTimeElement.innerHTML = e.convertSecondsToString(e.videoElement.currentTime) } videoPlay = e => { this.currentTimeInterval = setInterval(this.updateCurrentTime, 1e3, this); let t = setInterval(this.updateProgressBar, 16, this) }; videoPause = e => { clearInterval(this.currentTimeInterval), clearInterval(this.scrollBarTimer) }; updateProgressBar(e) { let t = e.videoElement.currentTime, n = e.videoElement.duration, i = t / n * 100; e.progressBar.style.width = i + "%", e.progressHandle.style.left = i + "%" } keyboardShortcuts = e => { e.code == "Space" && (e.preventDefault(), this.playPause(e)), e.code == "KeyK" && (e.preventDefault(), this.playPause(e)), e.code == "KeyF" && (e.preventDefault(), this.FullExitScreen(e)), e.code == "KeyM" && (e.preventDefault(), this.MuteUnmute(e)), e.code == "ArrowRight" && (e.preventDefault(), this.videoElement.currentTime = this.videoElement.currentTime + 5, this.currentTimeElement.innerHTML = this.convertSecondsToString(this.videoElement.currentTime), this.updateProgressBar(this)), e.code == "ArrowLeft" && (e.preventDefault(), this.videoElement.currentTime = this.videoElement.currentTime - 5, this.currentTimeElement.innerHTML = this.convertSecondsToString(this.videoElement.currentTime), this.updateProgressBar(this)), e.code == "KeyJ" && (e.preventDefault(), this.videoElement.currentTime = this.videoElement.currentTime + 10, this.currentTimeElement.innerHTML = this.convertSecondsToString(this.videoElement.currentTime), this.updateProgressBar(this)), e.code == "KeyL" && (e.preventDefault(), this.videoElement.currentTime = this.videoElement.currentTime - 10, this.currentTimeElement.innerHTML = this.convertSecondsToString(this.videoElement.currentTime), this.updateProgressBar(this)), e.code == "Numpad0" && (e.preventDefault(), this.videoElement.currentTime = 0, this.currentTimeElement.innerHTML = this.convertSecondsToString(this.videoElement.currentTime), this.updateProgressBar(this)), e.code == "Digit0" && (e.preventDefault(), this.videoElement.currentTime = 0, this.currentTimeElement.innerHTML = this.convertSecondsToString(this.videoElement.currentTime), this.updateProgressBar(this)) }; progressHandleDownMousePress = e => { e.preventDefault(), document.addEventListener("mousemove", this.scrubVideo), document.addEventListener("mouseup", this.endScrub) }; scrubVideo = e => { e.preventDefault(); let t = this.videoContainer.getBoundingClientRect().width, n = this.progressBar.getBoundingClientRect().width, i = e.movementX / t, r = n / t, s = this.videoElement.duration * (i + r), o = ((i + r) * 100).toFixed(2); this.progressBar.style.width = o + "%", this.progressHandle.style.left = o + "%", this.videoElement.currentTime = s }; endScrub = e => { document.removeEventListener("mousemove", this.scrubVideo) } }; document.addEventListener("DOMContentLoaded", a => { let e = new l("videoContainer") });
